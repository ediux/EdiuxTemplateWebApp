<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>

<#@ output extension=".cs"#>
<#

// This needs to be set to the .edmx file that you want to process.
string edmxFile = FindEDMXFileName(); // @"Model1.edmx";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);

string currName = new DirectoryInfo(GetCurrentDirectory()).Name;
string ns = code.VsNamespaceSuggestion().Replace(currName ,"").TrimEnd('.');
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace <#= ns #>
{ 
	public partial interface IRepositoryBase<T>
		where T : class
	{		
	}
}<#


EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{;

	if(!DoesFileExist(entity.Name + "Repository.partialClass.cs"))
	{
		fileManager.StartNewFile(entity.Name + "Repository.partialClass.cs");
		#>using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace <#= ns #>
{   
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#> partial class <#=code.Escape(entity)#>Repository : EFRepository<<#=code.Escape(entity)#>>, I<#=code.Escape(entity)#>Repository
	{

	}

	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#> partial interface I<#=code.Escape(entity)#>Repository : IRepositoryBase<<#=code.Escape(entity)#>>
	{

	}
}<#
	}
	else
	{
		fileManager.StartNewFile(entity.Name + "Repository.partialClass.cs");
		this.Write(OutputFile(entity.Name + "Repository.partialClass.cs"));
	}
}

	
fileManager.StartNewFile("IUnitOfWork.partialClass.cs");
#>using System;
using System.Data.Entity;
using System.Threading.Tasks;

namespace <#= ns #>
{
	public partial interface IUnitOfWork : System.IDisposable
	{		
	}
}<# fileManager.StartNewFile("EFRepository.partialClass.cs");
#>using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace <#= ns #>
{
	public partial class EFRepository<T> : IRepositoryBase<T> where T : class
	{
	    protected <#= code.Escape(container.Name) #> InternalDatabaseAlias { get {
            return (<#= code.Escape(container.Name) #>)UnitOfWork.Context;
        } }

		protected virtual void WriteErrorLog(Exception ex)
        {
            if (System.Web.HttpContext.Current == null)
            {
                Elmah.ErrorLog.GetDefault(null).Log(new Elmah.Error(ex));
            }
            else
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex);
            }
        }

	}
}<#fileManager.StartNewFile("EFUnitOfWork.partialClass.cs");
#>using System;
using System.Data.Entity;
using System.Threading.Tasks;

namespace <#= ns #>
{
	public partial class EFUnitOfWork : IUnitOfWork
	{	


		protected virtual void WriteErrorLog(Exception ex)
        {
            if (System.Web.HttpContext.Current == null)
            {
                Elmah.ErrorLog.GetDefault(null).Log(new Elmah.Error(ex));
            }
            else
            {
                Elmah.ErrorSignal.FromCurrentContext().Raise(ex);
            }
        }

		#region IDisposable Support
        private bool disposedValue = false; // 偵測多餘的呼叫

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: 處置 Managed 狀態 (Managed 物件)。
                }

                // TODO: 釋放 Unmanaged 資源 (Unmanaged 物件) 並覆寫下方的完成項。
                // TODO: 將大型欄位設為 null。

                disposedValue = true;
            }
        }

        // TODO: 僅當上方的 Dispose(bool disposing) 具有會釋放 Unmanaged 資源的程式碼時，才覆寫完成項。
        // ~EFUnitOfWork() {
        //   // 請勿變更這個程式碼。請將清除程式碼放入上方的 Dispose(bool disposing) 中。
        //   Dispose(false);
        // }

        // 加入這個程式碼的目的在正確實作可處置的模式。
        public void Dispose()
        {
            // 請勿變更這個程式碼。請將清除程式碼放入上方的 Dispose(bool disposing) 中。
            Dispose(true);
            // TODO: 如果上方的完成項已被覆寫，即取消下行的註解狀態。
            // GC.SuppressFinalize(this);
        }
        #endregion

	}
}
<#	fileManager.Process();
#>


<#+

bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{				
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

string FindEDMXFileName()
{
	string edmxFile = "";
	string parentFolder = System.IO.Directory.GetParent(GetCurrentDirectory()).FullName;
	string[] entityFrameworkFiles = Directory.GetFiles(parentFolder, "*.edmx");

	if(entityFrameworkFiles.Length > 0)
		edmxFile = entityFrameworkFiles[0];
	
	return edmxFile;
}
#>
