<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>

<#@ output extension=".cs"#>
<#

// This needs to be set to the .edmx file that you want to process.
string edmxFile = FindEDMXFileName(); // @"Model1.edmx";

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace <#= code.VsNamespaceSuggestion() #>
{ 
	public partial interface IRepositoryBase<T> :IDisposable
		where T : class
	{
		IUnitOfWork UnitOfWork { get; set; }
		
		/// <summary>
		/// 取得Entity全部筆數的IQueryable。
		/// </summary>
		/// <returns>Entity全部筆數的IQueryable。</returns>
		IQueryable<T> All();
        /// <summary>
        /// 取得Entity全部筆數的IQueryable<<typeparamref name="T>"></typeparamref>>的非同步版本。
        /// </summary>
        /// <returns></returns>
        Task<IQueryable<T>> AllAsync();

		IQueryable<T> Where(Expression<Func<T, bool>> expression);
		T Add(T entity);

		/// <summary>
		/// Batchs the create.
		/// </summary>
		/// <returns>The create.</returns>
		/// <param name="entities">Entities.</param>
		IList<T> BatchAdd(IEnumerable<T> entities);
		
		void Delete(T entity);

        /// <summary>
        /// 依據傳入的主索引鍵值尋找符合的資料列並回傳。
        /// </summary>
        /// <param name="predicate">主索引鍵值(組)</param>
        /// <returns>傳回符合鍵值的資料列。</returns>
		T Get(params object[] values);

        /// <summary>
        /// 以非同步方法依據傳入的主索引鍵值尋找符合的資料列並回傳。
        /// </summary>
        /// <param name="values">主索引鍵值(組)</param>
        /// <returns>傳回符合鍵值的資料列。</returns>
        Task<T> GetAsync(params object[] values);

		/// <summary>
		/// Reload the specified entity.
		/// </summary>
		/// <param name="entity">Entity.</param>
		T Reload(T entity);

		Task<T> ReloadAsync(T entity);
	}
}<#


EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{;

	if(!DoesFileExist(entity.Name + "Repository.cs"))
	{
		fileManager.StartNewFile(entity.Name + "Repository.cs");
		#>using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace <#= code.VsNamespaceSuggestion() #>
{   
	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#> partial class <#=code.Escape(entity)#>Repository : EFRepository<<#=code.Escape(entity)#>>, I<#=code.Escape(entity)#>Repository
	{

	}

	<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#> partial interface I<#=code.Escape(entity)#>Repository : IRepositoryBase<<#=code.Escape(entity)#>>
	{

	}
}<#
	}
	else
	{
		fileManager.StartNewFile(entity.Name + "Repository.cs");
		this.Write(OutputFile(entity.Name + "Repository.cs"));
	}
}

fileManager.StartNewFile("IUnitOfWork.cs");
#>using System.Data.Entity;
using System.Threading.Tasks;

namespace <#= code.VsNamespaceSuggestion() #>
{
	public partial interface IUnitOfWork
	{
		DbContext Context { get; set; }

        /// <summary>
        /// 提交資料庫變更耀球的非同步方法。
        /// </summary>
		void Commit();
		bool LazyLoadingEnabled { get; set; }
		bool ProxyCreationEnabled { get; set; }
		string ConnectionString { get; set; }

        /// <summary>
        /// 提交資料庫變更耀球的非同步方法。
        /// </summary>
        /// <returns>非同步執行結果。</returns>
        Task CommitAsync();
	}
}<# fileManager.StartNewFile("EFRepository.cs");
#>using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace <#= code.VsNamespaceSuggestion() #>
{
	public partial class EFRepository<T> : IRepositoryBase<T> where T : class
	{
		public IUnitOfWork UnitOfWork { get; set; }
		
		private IDbSet<T> _objectset;
		protected IDbSet<T> ObjectSet
		{
			get
			{
				if (_objectset == null)
				{
					_objectset = UnitOfWork.Context.Set<T>();
				}
				return _objectset;
			}
		}

		public virtual IQueryable<T> All()
		{
			return ObjectSet.AsQueryable();
		}

		public IQueryable<T> Where(Expression<Func<T, bool>> expression)
		{
			return ObjectSet.Where(expression);
		}

		public virtual T Add(T entity)
		{
			return ObjectSet.Add(entity);
		}

		public virtual void Delete(T entity)
		{
			ObjectSet.Remove(entity);
		}

		public Task<IQueryable<T>> AllAsync()
        {
            return Task.Run(() => ObjectSet.AsQueryable());
        }

        public IList<T> BatchAdd(IEnumerable<T> entities)
        {
            return ((DbSet<T>)ObjectSet).AddRange(entities).ToList();
        }

        public T Get(params object[] values)
        {
            return ObjectSet.Find(values);
        }

        public Task<T> GetAsync(params object[] values)
        {
            return Task.Run(() => ObjectSet.Find(values));
        }

        public T Reload(T entity)
        {
            UnitOfWork.Context.Entry(entity).Reload();
            return entity;
        }

        public async Task<T> ReloadAsync(T entity)
        {
           await UnitOfWork.Context.Entry(entity).ReloadAsync();
            return entity;
        }
		#region IDisposable Support
        private bool disposedValue = false; // 偵測多餘的呼叫

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    UnitOfWork.Commit();
                    UnitOfWork.Context.Dispose();
                }

                // TODO: 釋放 Unmanaged 資源 (Unmanaged 物件) 並覆寫下方的完成項。
                // TODO: 將大型欄位設為 null。

                disposedValue = true;
            }
        }

        // TODO: 僅當上方的 Dispose(bool disposing) 具有會釋放 Unmanaged 資源的程式碼時，才覆寫完成項。
        // ~EFRepository() {
        //   // 請勿變更這個程式碼。請將清除程式碼放入上方的 Dispose(bool disposing) 中。
        //   Dispose(false);
        // }

        // 加入這個程式碼的目的在正確實作可處置的模式。
        public void Dispose()
        {
            // 請勿變更這個程式碼。請將清除程式碼放入上方的 Dispose(bool disposing) 中。
            Dispose(true);
            // TODO: 如果上方的完成項已被覆寫，即取消下行的註解狀態。
            // GC.SuppressFinalize(this);
        }
        #endregion
	}
}<#fileManager.StartNewFile("EFUnitOfWork.cs");
#>using System.Data.Entity;
using System.Threading.Tasks;

namespace <#= code.VsNamespaceSuggestion() #>
{
	public partial class EFUnitOfWork : IUnitOfWork
	{
		private DbContext _context;
		public DbContext Context { get{ return _context;} set{ _context=value;} }

		public EFUnitOfWork()
		{
			Context = new <#=code.Escape(container)#>();
		}

		public void Commit()
		{
			Context.SaveChanges();
		}
		
		public async Task CommitAsync()
        {
            await Context.SaveChangesAsync();
        }

		public bool LazyLoadingEnabled
		{
			get { return Context.Configuration.LazyLoadingEnabled; }
			set { Context.Configuration.LazyLoadingEnabled = value; }
		}

		public bool ProxyCreationEnabled
		{
			get { return Context.Configuration.ProxyCreationEnabled; }
			set { Context.Configuration.ProxyCreationEnabled = value; }
		}
		
		public string ConnectionString
		{
			get { return Context.Database.Connection.ConnectionString; }
			set { Context.Database.Connection.ConnectionString = value; }
		}

	}
}
<#fileManager.StartNewFile("RepositoryHelper.cs");
#>
using System;

namespace <#= code.VsNamespaceSuggestion() #>
{
	public static class RepositoryHelper
	{
		public static IUnitOfWork GetUnitOfWork()
		{
			return new EFUnitOfWork();
		}

		public static TUnitOfWork GetUnitOfWork<TUnitOfWork>() where TUnitOfWork : IUnitOfWork
        {
            return Activator.CreateInstance<TUnitOfWork>();
        }
		
		<# foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{; #>

		public static <#=code.Escape(entity)#>Repository Get<#=code.Escape(entity)#>Repository()
		{
			var repository = new <#=code.Escape(entity)#>Repository();
			repository.UnitOfWork = GetUnitOfWork();
			return repository;
		}

		public static <#=code.Escape(entity)#>Repository Get<#=code.Escape(entity)#>Repository(IUnitOfWork unitOfWork)
		{
			var repository = new <#=code.Escape(entity)#>Repository();
			repository.UnitOfWork = unitOfWork;
			return repository;
		}		
<# } #>
	}
}<#	fileManager.Process();
#>


<#+

bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

string FindEDMXFileName()
{
	string edmxFile = "";
				
	string[] entityFrameworkFiles = Directory.GetFiles(GetCurrentDirectory(), "*.edmx");
	if(entityFrameworkFiles.Length > 0)
		edmxFile = entityFrameworkFiles[0];
	
	return edmxFile;
}
#>
